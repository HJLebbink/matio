if(MATIO_WITH_HDF5)
    if(NOT DEFINED HDF5_USE_STATIC_LIBRARIES)
        if(MATIO_SHARED)
            set(HDF5_USE_STATIC_LIBRARIES FALSE)
        else()
            set(HDF5_USE_STATIC_LIBRARIES TRUE)
        endif()
    endif()

    find_package(HDF5)
    if(HDF5_FOUND)
        if(HDF5_VERSION VERSION_LESS 1.8)
            message(FATAL_ERROR "HDF5 version ${HDF5_VERSION} is unsupported, minimum of 1.8 is required")
        endif()
        set(HAVE_HDF5 1)
    endif()
endif()

set(HAVE_HDF5_ZLIB FALSE)
if(HDF5_FOUND AND (TARGET zlib OR TARGET zlib-static OR TARGET zlib-shared OR TARGET hdf5::zlib-static OR TARGET hdf5::zlib-shared))
    set(HAVE_HDF5_ZLIB TRUE)
endif()

if(MATIO_WITH_ZLIB AND NOT HAVE_HDF5_ZLIB)
    find_package(ZLIB 1.2.3)

    # try to find a static zlib version
    if((NOT ZLIB_FOUND OR NOT MATIO_SHARED) AND ZLIB_INCLUDE_DIRS AND NOT ZLIB_STATIC_LIBRARY)
        get_filename_component(ZLIB_DIR ${ZLIB_LIBRARY} DIRECTORY)
        find_library(ZLIB_STATIC_LIBRARY libzlib PATHS ${ZLIB_DIR} ${ZLIB_ROOT}/lib ${PROJECT_BINARY_DIR}/lib)
        if(ZLIB_STATIC_LIBRARY)
            if(NOT TARGET ZLIB::ZLIB)
                set(ZLIB_FOUND TRUE)
                add_library(ZLIB::ZLIB UNKNOWN IMPORTED)
                set_target_properties(ZLIB::ZLIB PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${ZLIB_INCLUDE_DIRS}")
            endif()
            set_target_properties(ZLIB::ZLIB PROPERTIES IMPORTED_LOCATION "${ZLIB_STATIC_LIBRARY}")
            message(STATUS "found ZLIB static library: ${ZLIB_STATIC_LIBRARY}")
        endif()
    endif()

    if(ZLIB_FOUND)
        set(HAVE_ZLIB 1)
    endif()
endif()

if(HDF5_FOUND)
    add_library(HDF5::HDF5 INTERFACE IMPORTED)
    if(HDF5_USE_STATIC_LIBRARIES AND TARGET hdf5::hdf5-static)
        # static target from hdf5 1.10 or 1.12 config
        target_link_libraries(HDF5::HDF5 INTERFACE hdf5::hdf5-static)
    elseif(NOT HDF5_USE_STATIC_LIBRARIES AND TARGET hdf5::hdf5-shared)
        # shared target from hdf5 1.10 or 1.12 config
        target_link_libraries(HDF5::HDF5 INTERFACE hdf5::hdf5-shared)
    elseif(TARGET hdf5)
        # target from hdf5 1.8 config
        target_link_libraries(HDF5::HDF5 INTERFACE hdf5)
        if(NOT HDF5_USE_STATIC_LIBRARIES)
            target_compile_definitions(HDF5::HDF5 INTERFACE "H5_BUILT_AS_DYNAMIC_LIB")
        endif()
    else()
        # results from CMake FindHDF5
        target_include_directories(HDF5::HDF5 INTERFACE "${HDF5_INCLUDE_DIRS}")
        target_link_libraries(HDF5::HDF5 INTERFACE "${HDF5_LIBRARIES}")
        target_compile_definitions(HDF5::HDF5 INTERFACE "${HDF5_DEFINITIONS}")
    endif()
endif()

if(NOT HAVE_HDF5 AND MATIO_MAT73)
    message(FATAL_ERROR "MAT73 requires HDF5")
endif()
